ggtitle("") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(text=element_text(size = 12, family = "Times")) +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "right") +
theme(legend.title = element_blank()) +
# scale_fill_brewer(type = "qual", palette = 1) +
scale_fill_discrete(name = "Cluster", labels = cluster_names)
to_plot <- explored_factors[[4]]
out <- ggplot(to_plot, aes(y = mean, fill = cluster)) +
aes_string(x = factor_to_explore[1]) +
facet_wrap( ~ factor_to_explore[2] + factor_to_explore[3]) +
geom_bar(stat = "identity", color = "black") +
xlab("") +
ylab("Proportion of Responses") +
ggtitle("") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(text=element_text(size = 12, family = "Times")) +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "right") +
theme(legend.title = element_blank()) +
# scale_fill_brewer(type = "qual", palette = 1) +
scale_fill_discrete(name = "Cluster", labels = cluster_names)
factor_to_explore <- c("instructional_practice_re", "gender")
out <- ggplot(to_plot, aes(y = mean, fill = cluster)) +
aes_string(x = factor_to_explore[1]) +
facet_wrap( ~ factor_to_explore[2] + factor_to_explore[3]) +
geom_bar(stat = "identity", color = "black") +
xlab("") +
ylab("Proportion of Responses") +
ggtitle("") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(text=element_text(size = 12, family = "Times")) +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "right") +
theme(legend.title = element_blank()) +
# scale_fill_brewer(type = "qual", palette = 1) +
scale_fill_discrete(name = "Cluster", labels = cluster_names)
out
str(to_plot)
to_plot <- ungroup(to_plot)
out <- ggplot(to_plot, aes(y = mean, fill = cluster)) +
aes_string(x = factor_to_explore[1]) +
facet_wrap( ~ factor_to_explore[2] + factor_to_explore[3]) +
geom_bar(stat = "identity", color = "black") +
xlab("") +
ylab("Proportion of Responses") +
ggtitle("") +
theme(legend.position = "top") +
theme(legend.title = element_blank()) +
theme(text=element_text(size = 12, family = "Times")) +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "right") +
theme(legend.title = element_blank()) +
# scale_fill_brewer(type = "qual", palette = 1) +
scale_fill_discrete(name = "Cluster", labels = cluster_names)
out
str(to_plot)
?facet_wrap_
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[1]]
explored_factors[[2]]
explored_factors[[3]]
explored_factors[[3]]
explored_factors[[4]]
source('~/Dropbox/research/SciMo/command_and_control_6-15.R', echo=TRUE)
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[1]]
explored_factors[[2]]
explored_factors[[3]]
explored_factors[[3]]
explored_factors[[4]]
explored_factors[[4]]
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
data <- data.frame(data,
behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2), behavioral$X1),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2), cognitive$X1),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2), affective$X1), stringsAsFactors = F)
cognitive <- data.frame(cbind(data$imp_y, data$imp_fut), stringsAsFactors = F)
affective <- data.frame(cbind(data$enjoy, data$interest), stringsAsFactors = F)
behavioral <- data.frame(cbind(data$conc, data$hardwk), stringsAsFactors = F)
data <- data.frame(data,
behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2, behavioral$X1)),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2, cognitive$X1)),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2), affective$X1, stringsAsFactors = F))
data <- data.frame(data,
behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2, behavioral$X1)),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2, cognitive$X1)),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2, affective$X1)), stringsAsFactors = F)
str(data)
# command_and_control.R
###############################
### 1. SETTING UP #############
###############################
remove(list = ls())
# devtools::install_github("jrosen48/prcr")
library(prcr)
library(ggplot2)
?prepare_data
?cluster_data
?calculate_stats
?explore_factors
library(dplyr)
set.seed("03112016")
# setwd("~/dropbox/research/SciMo/prcr/R")
data <- tbl_df(foreign::read.spss("~/documents/myscimo/SciMo ESM.12.15.2010.sav", to.data.frame = T))
# data <- haven::read_spss("~/documents/myscimo/SciMo ESM.12.15.2010.sav")
# Removing the errant case
data$stud_ID <- stringr::str_trim(as.character(data$stud_ID))
to_remove <- data$stud_ID == "AXR050594" & data$month == 10 & data$day == 20 & data$year == 8 & data$signal == "2-2nd signal" # removing 10/20/8, ID = "AXR050594", second beeper
nrow(data)
data <- data[!to_remove, ]
nrow(data) # - 1 case
# Recoding instructional practices
data$instructional_practice_re <- car::recode(data$instructional_practice, # are these correct?
"c('1 Lecture') = 'Lecture';
c('2 Seatwk-Ind', '3 Review-Ind') = 'Individual Work';
c('4 Seatwk-Grp', '5 Review-Grp') = 'Group Work';
c('6 QuizPrep', '8 TestTaking', '7 QuizRev') = 'Quiz and Test';
c('9 Discussion') = 'Discussion';
c('11 PresElab', '10 Presentation') = 'Presentation';
c('12 Video-Watch', '13 Video-Elab') = 'Video';
c('15 Labwork', '14 Lab-Prep', '16 Lab-Review') = 'Laboratory';
c('17 NonInstTime') = 'Non-instructional';
c('18 OffTask') = NA")
###############################
### 2. CREATING SCALES ########
###############################
cognitive <- data.frame(cbind(data$imp_y, data$imp_fut), stringsAsFactors = F)
affective <- data.frame(cbind(data$enjoy, data$interest), stringsAsFactors = F)
behavioral <- data.frame(cbind(data$conc, data$hardwk), stringsAsFactors = F)
data <- data.frame(data,
behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2, behavioral$X1)),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2, cognitive$X1)),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2, affective$X1)), stringsAsFactors = F)
str(data)
complete.cases(data)
data_ss <-
data %>%
mutate(behavioral_scale = (behavioral$X1 + behavioral$X2) / 2,
cognitive_scale = (cognitive$X1 + cognitive$X2) / 2,
affective_scale = (affective$X1 + affective$X2) / 2) %>%
select(behavioral_scale,
cognitive_scale,
affective_scale,
stud_ID,
teacher_ID,
subject,
gender,
race,
instructional_practice_re,
age)
raw_data_matrix <- data_ss[, 1:3]
grouping_vector <- data_ss[, 4]
factor_data_frame <- dplyr::select(data_ss, stud_ID:age)
factor_data_frame$gender <- car::recode(factor_data_frame$gender,
"'1-M' = 'Male';
'2-F' = 'Female'")
factor_data_frame$gender <- car::recode(factor_data_frame$gender,
"'1-M' = 'Male';
'2-F' = 'Female'")
factor_data_frame$subject <- car::recode(factor_data_frame$subject,
"'1-Integrated Sci' = 'Integrated Science';
'2-Biology' = 'Biology';
'3-Chemistry' = 'Chemistry';
'4-Physics' = 'Physics'")
factor_data_frame$race <- car::recode(factor_data_frame$race,
"'1-Asian or Pacific Islander' = NA;
'2-Hispanic' = 'Hispanic';
'3-Black' = 'Black';
'4-White' = 'White';
'5-American Indian' = NA;
'6-Multi racial' = 'Multi racial'")
###############################
### 3. COMMAND AND CONTROL ####
###############################
prepared_data <- prepare_data(raw_data_matrix, "grand", grouping_vector, to_standardize = T)
str(prepared_data)
data <- data.frame(data,
behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2, behavioral$X1)),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2, cognitive$X1)),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2, affective$X1)), stringsAsFactors = F)
str(data)
data_ss <-
data %>%
mutate(behavioral_scale = (behavioral$X1 + behavioral$X2) / 2,
cognitive_scale = (cognitive$X1 + cognitive$X2) / 2,
affective_scale = (affective$X1 + affective$X2) / 2) %>%
select(behavioral_scale,
cognitive_scale,
affective_scale,
stud_ID,
teacher_ID,
subject,
gender,
race,
instructional_practice_re,
age)
str(data_ss)
complete.cases(data_ss[, 1:3])
table(complete.cases(data_ss[, 1:3]))
# command_and_control.R
###############################
### 1. SETTING UP #############
###############################
remove(list = ls())
# devtools::install_github("jrosen48/prcr")
library(prcr)
library(ggplot2)
?prepare_data
?cluster_data
?calculate_stats
?explore_factors
library(dplyr)
set.seed("03112016")
# setwd("~/dropbox/research/SciMo/prcr/R")
data <- tbl_df(foreign::read.spss("~/documents/myscimo/SciMo ESM.12.15.2010.sav", to.data.frame = T))
# data <- haven::read_spss("~/documents/myscimo/SciMo ESM.12.15.2010.sav")
# Removing the errant case
data$stud_ID <- stringr::str_trim(as.character(data$stud_ID))
to_remove <- data$stud_ID == "AXR050594" & data$month == 10 & data$day == 20 & data$year == 8 & data$signal == "2-2nd signal" # removing 10/20/8, ID = "AXR050594", second beeper
nrow(data)
data <- data[!to_remove, ]
nrow(data) # - 1 case
# Recoding instructional practices
data$instructional_practice_re <- car::recode(data$instructional_practice, # are these correct?
"c('1 Lecture') = 'Lecture';
c('2 Seatwk-Ind', '3 Review-Ind') = 'Individual Work';
c('4 Seatwk-Grp', '5 Review-Grp') = 'Group Work';
c('6 QuizPrep', '8 TestTaking', '7 QuizRev') = 'Quiz and Test';
c('9 Discussion') = 'Discussion';
c('11 PresElab', '10 Presentation') = 'Presentation';
c('12 Video-Watch', '13 Video-Elab') = 'Video';
c('15 Labwork', '14 Lab-Prep', '16 Lab-Review') = 'Laboratory';
c('17 NonInstTime') = 'Non-instructional';
c('18 OffTask') = NA")
###############################
### 2. CREATING SCALES ########
###############################
cognitive <- data.frame(cbind(data$imp_y, data$imp_fut), stringsAsFactors = F)
affective <- data.frame(cbind(data$enjoy, data$interest), stringsAsFactors = F)
behavioral <- data.frame(cbind(data$conc, data$hardwk), stringsAsFactors = F)
View(data)
data_ss <-
data %>%
mutate(behavioral_scale = ifelse(!is.na(behavioral$X1) & !is.na(behavioral$X2), (behavioral$X1 + behavioral$X2) / 2,
ifelse(is.na(behavioral$X1), behavioral$X2, behavioral$X1)),
cognitive_scale = ifelse(!is.na(cognitive$X1) & !is.na(cognitive$X2), (cognitive$X1 + cognitive$X2) / 2,
ifelse(is.na(cognitive$X1), cognitive$X2, cognitive$X1)),
affective_scale = ifelse(!is.na(affective$X1) & !is.na(affective$X2), (affective$X1 + affective$X2) / 2,
ifelse(is.na(affective$X1), affective$X2, affective$X1)), stringsAsFactors = F) %>%
select(behavioral_scale,
cognitive_scale,
affective_scale,
stud_ID,
teacher_ID,
subject,
gender,
race,
instructional_practice_re,
age)
str(data_ss)
raw_data_matrix <- data_ss[, 1:3]
grouping_vector <- data_ss[, 4]
factor_data_frame <- dplyr::select(data_ss, stud_ID:age)
factor_data_frame$gender <- car::recode(factor_data_frame$gender,
"'1-M' = 'Male';
'2-F' = 'Female'")
factor_data_frame$gender <- car::recode(factor_data_frame$gender,
"'1-M' = 'Male';
'2-F' = 'Female'")
factor_data_frame$subject <- car::recode(factor_data_frame$subject,
"'1-Integrated Sci' = 'Integrated Science';
'2-Biology' = 'Biology';
'3-Chemistry' = 'Chemistry';
'4-Physics' = 'Physics'")
factor_data_frame$race <- car::recode(factor_data_frame$race,
"'1-Asian or Pacific Islander' = NA;
'2-Hispanic' = 'Hispanic';
'3-Black' = 'Black';
'4-White' = 'White';
'5-American Indian' = NA;
'6-Multi racial' = 'Multi racial'")
###############################
### 3. COMMAND AND CONTROL ####
###############################
prepared_data <- prepare_data(raw_data_matrix, "grand", grouping_vector, to_standardize = T)
str(prepared_data)
output <- create_profiles(prepared_data, 7, "squared_euclidean", "complete")
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
statistics[[6]]
statistics[[7]]
statistics[[8]]
statistics[[9]]
statistics[[10]] +
ylab("Z-Score")
cluster_vector <- c("Busy", "Recreational", Full, "Universally Low", "Purposeful", "Moderately Low", "Rationally")
cluster_vector <- c("Busy", "Recreational", "Full", "Universally Low", "Purposeful", "Moderately Low", "Rationally")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
explored_factors[[5]]
explored_factors[[6]]
devtools::load_all(".")
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[6]]
devtools::load_all(".")
cluster_vector <- c("Busy", "Recreational", "Full", "Universally Low", "Purposeful", "Moderately Low", "Rationally")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
devtools::load_all(".")
cluster_vector <- c("Busy", "Recreational", "Full", "Universally Low", "Purposeful", "Moderately Low", "Rationally")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[6]]
explored_factors[[6]][[1]]
explored_factors[[6]][[2]]
statistics[[7]]
statistics[[8]]
statistics[[8]]
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
statistics[[8]]
devtools::load_all(".")
statistics[[8]]
manova_function <- function(data, cluster_assignment){
out <- list()
data$DV <- as.matrix(data)
data <- cbind(data, cluster_assignment)
mv_out <- manova(DV ~ cluster_assignment, data = data)
out[[1]] <- summary(mv_out, test = "Pillai")
out[[2]] <- summary.aov(mv_out)
out[[3]] <- testing_the_tukey(data)
return(out)
}
calculate_stats <- function(clustering_output, names_of_clusters = NULL){
out <- list()
# this function takes a list, clustering output, from the cluster_data function
options(max.print = 100000)
out[[1]] <- dissim_function(clustering_output[[1]]) # agglomeration schedule - currently out of order
out[[2]] <- as.dendrogram(clustering_output[[1]]) # dendrogram
out[[3]] <- cutree(clustering_output[[1]], attributes(clustering_output)$n_clusters_attr) # hclust assignment
out[[4]] <- clValid::dunn(distance = NULL, clusters = out[[3]], Data = attributes(clustering_output)$data_attr , method = "euclidean")
out[[5]] <- clustering_output[[2]]$cluster # kmeans assignment
out[[6]] <- (clustering_output[[2]]$totss - sum(clustering_output[[2]]$withinss)) / clustering_output[[2]]$totss # proportion of variance explained
out[[7]] <- clValid::dunn(distance = NULL, clusters = out[[5]], Data = attributes(clustering_output)$data_attr, method = "euclidean")
out[[8]] <- manova_function(attributes(clustering_output)$data_attr, out[[5]])
out[[9]] <- cluster_freq_function(attributes(clustering_output)$data_attr, attributes(clustering_output)$n_clusters_attr, clustering_output[[2]], names_of_clusters)
out[[10]] <- cluster_plot_function(out[[9]])
out[[11]] <- clValid::connectivity(clusters = out[[5]], Data = attributes(clustering_output)$data_attr)
attributes(out) <- list(n_clusters_attr = attributes(clustering_output)$n_clusters_attr, data_attr = prepared_data, args_attr = args, cases_to_keep = attributes(clustering_output)$cases_to_keep)
print("### Created the following output ... ")
print("### 1. Hierarchical cluster analysis diagnostics: Agglomeration schedule ###")
print("### 2. Hierarchical cluster analysis diagnostics: Dendrogram ###")
print("### 3. Hierarchical cluster analysis assignments ###")
print("### 4. Hierarchical cluster analysis diagnostics: Dunn Index ###")
print("### 5. K-means cluster analysis assignments ###")
print("### 6. K-means cluster analysis diagnostics: Proportion of variance explained (R^2) ###")
print("### 7. K-means cluster analysis diagnostics: Dunn Index ###")
print("### 8. Overall diagnostics: MANOVA ###")
print("### 9. Overall output: Cluster centroids ###")
print("### 10. Overall output: ggplot2 object for plot of cluster centroids ###")
invisible(out)
}
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
statistics[[8]]
devtools::load_all(".")
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
statistics[[8]]
manova_function <- function(data, cluster_assignment, names_of_clusters){
out <- list()
data$DV <- as.matrix(data)
data <- cbind(data, cluster_assignment)
mv_out <- manova(DV ~ cluster_assignment, data = data)
out[[1]] <- summary(mv_out, test = "Pillai")
out[[2]] <- summary.aov(mv_out)
out[[3]] <- testing_the_tukey(data)
names(out[[3]]) <- names_of_clusters
return(out)
}
calculate_stats <- function(clustering_output, names_of_clusters = NULL){
out <- list()
# this function takes a list, clustering output, from the cluster_data function
options(max.print = 100000)
out[[1]] <- dissim_function(clustering_output[[1]]) # agglomeration schedule - currently out of order
out[[2]] <- as.dendrogram(clustering_output[[1]]) # dendrogram
out[[3]] <- cutree(clustering_output[[1]], attributes(clustering_output)$n_clusters_attr) # hclust assignment
out[[4]] <- clValid::dunn(distance = NULL, clusters = out[[3]], Data = attributes(clustering_output)$data_attr , method = "euclidean")
out[[5]] <- clustering_output[[2]]$cluster # kmeans assignment
out[[6]] <- (clustering_output[[2]]$totss - sum(clustering_output[[2]]$withinss)) / clustering_output[[2]]$totss # proportion of variance explained
out[[7]] <- clValid::dunn(distance = NULL, clusters = out[[5]], Data = attributes(clustering_output)$data_attr, method = "euclidean")
out[[8]] <- manova_function(attributes(clustering_output)$data_attr, out[[5]], names_of_clusters)
out[[9]] <- cluster_freq_function(attributes(clustering_output)$data_attr, attributes(clustering_output)$n_clusters_attr, clustering_output[[2]], names_of_clusters)
out[[10]] <- cluster_plot_function(out[[9]])
out[[11]] <- clValid::connectivity(clusters = out[[5]], Data = attributes(clustering_output)$data_attr)
attributes(out) <- list(n_clusters_attr = attributes(clustering_output)$n_clusters_attr, data_attr = prepared_data, args_attr = args, cases_to_keep = attributes(clustering_output)$cases_to_keep)
print("### Created the following output ... ")
print("### 1. Hierarchical cluster analysis diagnostics: Agglomeration schedule ###")
print("### 2. Hierarchical cluster analysis diagnostics: Dendrogram ###")
print("### 3. Hierarchical cluster analysis assignments ###")
print("### 4. Hierarchical cluster analysis diagnostics: Dunn Index ###")
print("### 5. K-means cluster analysis assignments ###")
print("### 6. K-means cluster analysis diagnostics: Proportion of variance explained (R^2) ###")
print("### 7. K-means cluster analysis diagnostics: Dunn Index ###")
print("### 8. Overall diagnostics: MANOVA ###")
print("### 9. Overall output: Cluster centroids ###")
print("### 10. Overall output: ggplot2 object for plot of cluster centroids ###")
invisible(out)
}
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
statistics[[8]]
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "race"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
str(factor_data_frame)
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "race"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
devtools::load_all(".")
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("instructional_practice_re", "race"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
explored_factors[[5]]
table(factor_data_frame$race)
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("race", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("race", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
explored_factors <- explore_factors(statistics[[5]], attributes(statistics)$cases_to_keep, factor_data_frame,
c("subject", "gender"), variable_to_find_proportion = NULL,
cluster_names = cluster_vector)
explored_factors[[4]]
install.packages("pwr")
library(pwr)
?pwr.anova.test
statistics[[8]]
statistics[[10]] + ylab("Z-Score")
?pwr.anova.test
statistics[[6]]
statistics[[7]]
statistics[[8]]
statistics[[9]]
?pwr.t2n.test
pwr.t2n.test(n1 = 561, n2 = 447, d = .075, alternative = "two.sided")
install.packages("effsize")
library(effsize)
str(output)
str(statistics)
statistics <- calculate_stats(output, c("Behavioral Engagement", "Cognitive Engagement", "Affective Engagement"))
